var l=Object.defineProperty;var w=(u,e,r)=>e in u?l(u,e,{enumerable:!0,configurable:!0,writable:!0,value:r}):u[e]=r;var D=(u,e,r)=>w(u,typeof e!="symbol"?e+"":e,r);import{aA as B,aB as a,aC as c,aD as d}from"./index-BlVR3GtE.js";const S=1;class y{constructor(){D(this,"db",null)}async initDB(){return new Promise((e,r)=>{const o=indexedDB.open(B,S);o.onerror=()=>r(o.error),o.onsuccess=()=>{this.db=o.result,e()},o.onupgradeneeded=n=>{const s=n.target.result;s.createObjectStore(a,{keyPath:"subBookId"}),s.createObjectStore(c,{keyPath:"journeyId"}),s.createObjectStore(d,{keyPath:"articleIdInJourney"})}})}async saveSubBookInfo(e){return this.db||await this.initDB(),new Promise((r,o)=>{const t=this.db.transaction([a],"readwrite").objectStore(a).put(e);t.onerror=()=>o(t.error),t.onsuccess=()=>r()})}async getSubBookInfo(e){return this.db||await this.initDB(),new Promise((r,o)=>{const t=this.db.transaction([a],"readonly").objectStore(a).get(e);t.onerror=()=>o(t.error),t.onsuccess=()=>r(t.result)})}async removeSubBookInfo(e){return this.db||await this.initDB(),new Promise((r,o)=>{const t=this.db.transaction([a],"readwrite").objectStore(a).delete(e);t.onerror=()=>o(t.error),t.onsuccess=()=>r()})}async saveJourneys(e){return new Promise((r,o)=>{const s=this.db.transaction([c],"readwrite").objectStore(c);let t=0;e.forEach(i=>{const b={...i,journeyId:i._id},h=s.put(b);h.onsuccess=()=>{t++,t===e.length&&r()},h.onerror=()=>o(h.error)})})}async getJourneyCards(e){return this.db||await this.initDB(),new Promise((r,o)=>{const i=this.db.transaction([c],"readonly").objectStore(c).index("parent").getAll(e);i.onerror=()=>o(i.error),i.onsuccess=()=>r(i.result)})}async removeJourneyInfo(e){return this.db||await this.initDB(),new Promise((r,o)=>{const t=this.db.transaction([c],"readwrite").objectStore(c).delete(e);t.onerror=()=>o(t.error),t.onsuccess=()=>r()})}async saveArticleInfo(e){return this.db||await this.initDB(),new Promise((r,o)=>{const s=this.db.transaction([d],"readwrite").objectStore(d);let t=0;e.forEach(i=>{const b=s.put(i);b.onsuccess=()=>{t++,t===e.length&&r()},b.onerror=()=>o(b.error)})})}async getArticleInfo(e){return this.db||await this.initDB(),new Promise((r,o)=>{const t=this.db.transaction([d],"readonly").objectStore(d).get(e);t.onerror=()=>o(t.error),t.onsuccess=()=>r(t.result)})}async removeArticleInfo(e){return this.db||await this.initDB(),new Promise((r,o)=>{const t=this.db.transaction([d],"readwrite").objectStore(d).delete(e);t.onerror=()=>o(t.error),t.onsuccess=()=>r()})}}const m=new y;export{m as i};
